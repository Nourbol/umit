from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import CallbackQuery, Message

from apirequests import post_code
from data.config import USERS, User
from loader import dp


class CheckingCode(StatesGroup):
    code = State()


@dp.callback_query_handler(text="auth_code")
async def check_code(call: CallbackQuery):
    await CheckingCode.code.set()
    await call.message.answer(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ üóù")


@dp.message_handler(state=CheckingCode.code)
async def code_input(message: Message, state: FSMContext):
    code = message.text
    token = post_code(code)
    if not token is None:
        USERS.append(User(message.from_user.id, token))
        await message.answer(f"‚úîÔ∏è –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é!\n"
                             f"–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å–≤–∏–π –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /menu üëæ")
    else:
        await message.answer(f"‚úñÔ∏è –í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞–∑!")

    await state.finish()
