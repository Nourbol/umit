from typing import List

import requests
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import CallbackQuery, InputMediaPhoto, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.callback_data import CallbackData
from requests.exceptions import MissingSchema

import apirequests
from apirequests import get_user, get_avatar
from data.config import USERS
from keyboards.inline.menu_buttons import menu_kb, get_location_kb
from keyboards.inline.profile_keyboard import get_profile_kb, profile_kb_cb
from loader import dp, bot


def find_user(user_id):
    for i in range(len(USERS)):
        if USERS[i].user_id == user_id:
            return USERS[i]
    return None


@dp.message_handler(commands=['menu'], state="*")
async def show_menu(message: types.Message, state: FSMContext):
    await state.finish()

    if find_user(message.from_user.id) is None:
        return

    await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µüëæ",
                         reply_markup=menu_kb())


@dp.callback_query_handler(text="profile")
async def show_profile(call: CallbackQuery):
    user = find_user(call.from_user.id)
    user_info = get_user(user.token)

    text = f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n" \
           f"----------------------------------\n" \
           f"Email: {user_info['email']}\n" \
           f"–ù–∏–∫–Ω–µ–π–º: {user_info['username']}\n" \
           f"----------------------------------\n" \
           f"–°—Ç–∞—Ç—É—Å: {user_info['status']}\n" \
           f"(–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)"
    try:
        url = user_info['avatarUrl']
        if url is not None:
            await bot.send_photo(call.message.chat.id, url, caption=text, reply_markup=get_profile_kb())
        else:
            await bot.send_message(call.message.chat.id, text, reply_markup=get_profile_kb())
    except MissingSchema:
        pass
    except requests.ConnectionError:
        pass


@dp.callback_query_handler(profile_kb_cb.filter(action="exit"))
async def sign_out_handler(call: CallbackQuery):
    user = find_user(call.from_user.id)
    USERS.remove(user)
    await call.message.answer("–í—ã –≤—ã—à–ª–∏ —Å –∞–∫–∫–∞—É–Ω—Ç–∞, —á—Ç–æ–±—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∫–æ–º–∞–Ω–¥–µ /start")


set_avatar_kb_cb: CallbackData = CallbackData("set_avatar_kb_cb", "id")


class SetAvatarState(StatesGroup):
    progress = State()


@dp.callback_query_handler(profile_kb_cb.filter(action="avatar"))
async def change_avatar_handler(call: CallbackQuery, state: FSMContext):
    avatars: List = get_avatar()
    await SetAvatarState.progress.set()
    await state.update_data(avatars=avatars)
    await download_more_avatars_handler(call, state)


@dp.callback_query_handler(profile_kb_cb.filter(action="avatar"), state=SetAvatarState.progress)
async def download_more_avatars_handler(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    avatars = data["avatars"]

    for i, avatar in enumerate(avatars):
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç –∞–≤–∞—Ç–∞—Ä", callback_data=set_avatar_kb_cb.new(avatar["id"]))
            ]])
        await bot.send_photo(chat_id=call.message.chat.id, photo=avatar["url"], reply_markup=kb)

        avatars.remove(avatar)
        if i == 2:
            break
    await state.update_data(avatars=avatars)

    buttons = []
    text = "–ê–≤–∞—Ç–∞—Ä—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –í—ã –º–æ–µ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö, –ª–∏–±–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä –∞–≤–∞—Ç–∞—Ä–∞"
    if len(avatars) != 0:
        text = f"–ï—â–µ –µ—Å—Ç—å {len(avatars)} –∞–≤–∞—Ç–∞—Ä–æ–≤, –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ?"
        buttons.append([
            InlineKeyboardButton(text="–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ", callback_data=profile_kb_cb.new("avatar"))
        ])

    buttons.append([
        InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä –∞–≤–∞—Ç–∞—Ä–∫–∏", callback_data=profile_kb_cb.new("stop"))
    ])

    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    await call.message.answer(text, reply_markup=kb)


@dp.callback_query_handler(profile_kb_cb.filter(action="stop"), state=SetAvatarState.progress)
async def stop_avatar_set(call: CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.answer("–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—ã–±–æ—Ä –∞–≤–∞—Ç–∞—Ä–∫–∏, –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –≤ /menu")


@dp.callback_query_handler(set_avatar_kb_cb.filter(), state=SetAvatarState.progress)
async def set_avatar(call: CallbackQuery, callback_data: dict, state: FSMContext):
    user = find_user(call.from_user.id)
    apirequests.set_avatar(user.token, callback_data["id"])
    await call.message.answer(f"–ê–≤–∞—Ç–∞—Ä –≤—ã–±—Ä–∞–Ω, –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –≤ /menu")
    await state.finish()


@dp.callback_query_handler(text="nearest_point")
async def ask_location(call: CallbackQuery):
    await call.message.answer("–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º‚úàÔ∏è!", reply_markup=get_location_kb())

# –°–¥–µ–ª–∞–π —Ç–∞–∫, —á—Ç–æ–±—ã –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", –±–æ—Ç –æ—Ç–≤–µ—á–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ–º (—Å–º. —Å—Ö–µ–º—É –í–ª–∞–¥–∞) –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏
# –Ω—É–∂–Ω—ã–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
